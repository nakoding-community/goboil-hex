// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "github.com/nakoding-community/golang-boilerplate/dto"

	entity "github.com/nakoding-community/golang-boilerplate/entity"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

// CreateMany provides a mock function with given fields: ctx, data
func (_m *User) CreateMany(ctx context.Context, data []entity.User) ([]entity.User, error) {
	ret := _m.Called(ctx, data)

	var r0 []entity.User
	if rf, ok := ret.Get(0).(func(context.Context, []entity.User) []entity.User); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []entity.User) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOne provides a mock function with given fields: ctx, data
func (_m *User) CreateOne(ctx context.Context, data *entity.User) (*entity.User, error) {
	ret := _m.Called(ctx, data)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) *entity.User); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.User) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOne provides a mock function with given fields: ctx, id
func (_m *User) DeleteOne(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, search, filters, ascending, descending, pagination
func (_m *User) Find(ctx context.Context, search string, filters []dto.Filter, ascending []string, descending []string, pagination dto.Pagination) ([]entity.User, *dto.PaginationInfo, error) {
	ret := _m.Called(ctx, search, filters, ascending, descending, pagination)

	var r0 []entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string, []dto.Filter, []string, []string, dto.Pagination) []entity.User); ok {
		r0 = rf(ctx, search, filters, ascending, descending, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	var r1 *dto.PaginationInfo
	if rf, ok := ret.Get(1).(func(context.Context, string, []dto.Filter, []string, []string, dto.Pagination) *dto.PaginationInfo); ok {
		r1 = rf(ctx, search, filters, ascending, descending, pagination)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dto.PaginationInfo)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, []dto.Filter, []string, []string, dto.Pagination) error); ok {
		r2 = rf(ctx, search, filters, ascending, descending, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindOne provides a mock function with given fields: ctx, id
func (_m *User) FindOne(ctx context.Context, id int) (*entity.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDBConnector provides a mock function with given fields:
func (_m *User) GetDBConnector() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Some provides a mock function with given fields: ctx, id
func (_m *User) Some(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOne provides a mock function with given fields: ctx, id, data
func (_m *User) UpdateOne(ctx context.Context, id int, data *entity.User) (*entity.User, error) {
	ret := _m.Called(ctx, id, data)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, int, *entity.User) *entity.User); ok {
		r0 = rf(ctx, id, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, *entity.User) error); ok {
		r1 = rf(ctx, id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUser creates a new instance of User. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewUser(t testing.TB) *User {
	mock := &User{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
